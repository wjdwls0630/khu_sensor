// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

//(* CORE_GENERATION_INFO="lpf_begin,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=46,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=812,HLS_SYN_LUT=1652}" *)

module lpf_begin (
        ap_clk,		//i_CLK
        ap_rst,		//i_rstn
        ap_start,		//i_X_DATA_VALID
        ap_done,		//o_Y_DATA_VALID
        ap_idle,		//o_X_DATA_BUSY??
		  ap_ack,		
        data_in,		//i_X_DATA
        ap_return		//o_Y_DATA
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   ap_ack;
output   ap_done;
output   ap_idle;
input  [31:0] data_in;
output  reg [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

//(* fsm_encoding = "none" *) 
reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_90_p2;
wire    ap_CS_fsm_state2;
reg   [1:0] lpf_tb_x_data_address0;
reg    lpf_tb_x_data_ce0;
reg    lpf_tb_x_data_we0;
reg   [31:0] lpf_tb_x_data_d0;
wire   [31:0] lpf_tb_x_data_q0;
reg   [1:0] lpf_tb_y_data_address0;
reg    lpf_tb_y_data_ce0;
reg    lpf_tb_y_data_we0;
reg   [31:0] lpf_tb_y_data_d0;
wire   [31:0] lpf_tb_y_data_q0;
wire    grp_lpf_fu_77_ap_start;
wire    grp_lpf_fu_77_ap_done;
wire    grp_lpf_fu_77_ap_idle;
wire    grp_lpf_fu_77_ap_ready;
wire   [1:0] grp_lpf_fu_77_low_pass_filter_x_data_address0;
wire    grp_lpf_fu_77_low_pass_filter_x_data_ce0;
wire    grp_lpf_fu_77_low_pass_filter_x_data_we0;
wire   [31:0] grp_lpf_fu_77_low_pass_filter_x_data_d0;
wire   [1:0] grp_lpf_fu_77_low_pass_filter_y_data_address0;
wire    grp_lpf_fu_77_low_pass_filter_y_data_ce0;
wire    grp_lpf_fu_77_low_pass_filter_y_data_we0;
wire   [31:0] grp_lpf_fu_77_low_pass_filter_y_data_d0;
wire   [31:0] grp_lpf_fu_77_ap_return;
reg   [1:0] i_0_i_reg_66;
wire   [0:0] exitcond_i_fu_84_p2;
reg    ap_reg_grp_lpf_fu_77_ap_start;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_1_fu_96_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_reg_grp_lpf_fu_77_ap_start = 1'b0;
end

lpf_begin_lpf_tb_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
lpf_tb_x_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpf_tb_x_data_address0),
    .ce0(lpf_tb_x_data_ce0),
    .we0(lpf_tb_x_data_we0),
    .d0(lpf_tb_x_data_d0),
    .q0(lpf_tb_x_data_q0)
);

lpf_begin_lpf_tb_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
lpf_tb_y_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpf_tb_y_data_address0),
    .ce0(lpf_tb_y_data_ce0),
    .we0(lpf_tb_y_data_we0),
    .d0(lpf_tb_y_data_d0),
    .q0(lpf_tb_y_data_q0)
);

lpf grp_lpf_fu_77(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lpf_fu_77_ap_start),
    .ap_done(grp_lpf_fu_77_ap_done),
    .ap_idle(grp_lpf_fu_77_ap_idle),
    .ap_ready(grp_lpf_fu_77_ap_ready),
    .low_pass_filter_x_data_address0(grp_lpf_fu_77_low_pass_filter_x_data_address0),
    .low_pass_filter_x_data_ce0(grp_lpf_fu_77_low_pass_filter_x_data_ce0),
    .low_pass_filter_x_data_we0(grp_lpf_fu_77_low_pass_filter_x_data_we0),
    .low_pass_filter_x_data_d0(grp_lpf_fu_77_low_pass_filter_x_data_d0),
    .low_pass_filter_x_data_q0(lpf_tb_x_data_q0),
    .low_pass_filter_y_data_address0(grp_lpf_fu_77_low_pass_filter_y_data_address0),
    .low_pass_filter_y_data_ce0(grp_lpf_fu_77_low_pass_filter_y_data_ce0),
    .low_pass_filter_y_data_we0(grp_lpf_fu_77_low_pass_filter_y_data_we0),
    .low_pass_filter_y_data_d0(grp_lpf_fu_77_low_pass_filter_y_data_d0),
    .low_pass_filter_y_data_q0(lpf_tb_y_data_q0),
    .a(data_in),
    .ap_return(grp_lpf_fu_77_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_lpf_fu_77_ap_start <= 1'b0;
    end else begin
        if (((exitcond_i_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_reg_grp_lpf_fu_77_ap_start <= 1'b1;
        end else if ((grp_lpf_fu_77_ap_ready == 1'b1)) begin
            ap_reg_grp_lpf_fu_77_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_66 <= i_fu_90_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_66 <= 2'd0;
    end
end

always @ (*) begin
    if (((grp_lpf_fu_77_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

/*
always @ (*) begin
    if (((grp_lpf_fu_77_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end
*/
always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_x_data_address0 = tmp_1_fu_96_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_x_data_address0 = grp_lpf_fu_77_low_pass_filter_x_data_address0;
    end else begin
        lpf_tb_x_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_x_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_x_data_ce0 = grp_lpf_fu_77_low_pass_filter_x_data_ce0;
    end else begin
        lpf_tb_x_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_x_data_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_x_data_d0 = grp_lpf_fu_77_low_pass_filter_x_data_d0;
    end else begin
        lpf_tb_x_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_x_data_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_x_data_we0 = grp_lpf_fu_77_low_pass_filter_x_data_we0;
    end else begin
        lpf_tb_x_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_y_data_address0 = tmp_1_fu_96_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_y_data_address0 = grp_lpf_fu_77_low_pass_filter_y_data_address0;
    end else begin
        lpf_tb_y_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_y_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_y_data_ce0 = grp_lpf_fu_77_low_pass_filter_y_data_ce0;
    end else begin
        lpf_tb_y_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_y_data_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_y_data_d0 = grp_lpf_fu_77_low_pass_filter_y_data_d0;
    end else begin
        lpf_tb_y_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lpf_tb_y_data_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lpf_tb_y_data_we0 = grp_lpf_fu_77_low_pass_filter_y_data_we0;
    end else begin
        lpf_tb_y_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_lpf_fu_77_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

reg [31:0] tp;
always@(*)begin
	if(ap_done==1'b1)tp=grp_lpf_fu_77_ap_return;
	else tp=tp;
end

always@(*)begin
	if(ap_ack==1'b1)ap_return=tp;
	else ap_return=ap_return;
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

//assign ap_return = grp_lpf_fu_77_ap_return;

assign exitcond_i_fu_84_p2 = ((i_0_i_reg_66 == 2'd3) ? 1'b1 : 1'b0);

assign grp_lpf_fu_77_ap_start = ap_reg_grp_lpf_fu_77_ap_start;

assign i_fu_90_p2 = (i_0_i_reg_66 + 2'd1);

assign tmp_1_fu_96_p1 = i_0_i_reg_66;

endmodule //lpf_begin
