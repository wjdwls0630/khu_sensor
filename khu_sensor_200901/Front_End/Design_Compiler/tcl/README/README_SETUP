#******************************************************************************
#**                Synopsys environment file for STD150E library             **
#******************************************************************************
#******************************************************************************
#**                           Specify Libraries                             **
#******************************************************************************
#******************************************************************************
# command
# link_library
# target_library
# symbol_library
# synthetic_library
#******************************************************************************

#******************************************************************************
# Search Path is the specification of path to find a library which be used.
# Therefore, we should include db directory($dk_home/syn/STD150E/) in search path.
# If there is db in the search_path, linking will be performed automatically.
# The search_path variable provides the tool with the directories
# in which to search for unresolved references.
#******************************************************************************

# Set libraries: Target Tech & Link
#******************************************************************************
# target_library : the library to use when synthesize
# target_library is the library which include one specific base fabrication
# and applied gates(Adder, DFF...).
# The target_library will be used to mapping and optimization during sythensis.
# The target_library variable identifies a technology or a list of
# technology libraries of the components to use when you optimize a design.
#******************************************************************************
#******************************************************************************
# on Constraints ->
# only specify worst case library to target_library, and set min library on Best case
# In order to satisfy constraints of max and min, circuit_designers usually use this kind of method.
#******************************************************************************

#******************************************************************************
# Link_Library(technology library) : the library that assigns which technology to use and mapping.
# The link_library set the library for mapping one by one (gates) between two different fabrications
# (ex : GTECH to target_library)
# Using link command on DC does mapping present design gate information via the set link_library
# and creates connectivity information.
# The link_library variable names technology libraries and design files to use
# during the link process for a design.
# If a design references other design files, the design files should be identified with link_library
# so they can be located.
# (If a design's full path name is not in link_library, you should list the directories
# within which the design file resides in the search_path).
#******************************************************************************

#******************************************************************************
# Symbol_Library : the library which contains symbol of every gates.
# The symbol_library has symbols of every gates and the library is used
# when schematic is called.
# The symbol_library variable identifies symbol libraries to be used during schematic generation.
# The value of this variable can be one or more symbol libraries.
#******************************************************************************

#******************************************************************************
# Code by HDL -> read_file command -> GTECH
# GTECH netlist(schematic) -> link command -> call link_library and mapping(1:1)
# (ex GTECH nand - Samsung 0.13um nand creates connectivity information!)
# Specify Constraints(sdc) -> compile command -> Optimization and after it, re-mapping.
#******************************************************************************

#******************************************************************************
#**              Set nets connected to multiple port                         **
#**           (Fixing Feedthroughs and Multiple Port Nets)                   **
#******************************************************************************
#******************************************************************************
# By default, Design compiler does not buffer nets that are connected to the
# multiple ports.
# To prevent multiple-port connections, use the set_fix_multiple_port_nets command
# to set the fix_multiple_port_nets attribute on a design.

# Feedthroughs (-feedthroughs)
# Insert buffers so that input ports are isolated from output ports.
# A feedthrough net occurs when an input port and output port are connected directly
# with no intervening logic.

# Multiple output ports (-outputs)
# Insert buffers so that no cell driver pin drives more than one output port.

# Constants (-constants)
# Duplicate constant logic so that no constant drives more than one output port.
# Alternatively, you can use the -buffer_constants option to buffer logic constants
# instead of duplicating them.
#******************************************************************************
