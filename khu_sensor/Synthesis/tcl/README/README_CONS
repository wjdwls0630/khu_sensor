#******************************************************************************
#**                         Set Design Constraints                          **
#******************************************************************************
#******************************************************************************
# command
#
# Design rule constraints
# set_max_transition
# set_max_fanout
# set_max_capacitance
#
# Design optimization constraints
# create_clock
# set_clock_latency
# set_propagated_clock
# set_clock_uncertainty
# set_clock_transition
# set_input_delay
# set_output_delay
# set_max_area
#******************************************************************************
#******************************************************************************
# Design Compiler has two types of constraints.
# One thing is design rule constraint which is the value defined by the technology library itself.
# Since circuit would not operate properly when the constraint is breached,
# It has high priority during synthesis.
# (If you do not define rules, Design Compiler would apply constraints defined
# by the technology library itself)
# Another thing is optimization constraints which are the set condition of speed and area
# during optimization.
#******************************************************************************
#******************************************************************************
#**                     Set Design Rule Constraints                          **
#******************************************************************************
# set_max_transition
# The maximum transition time(rise or fall time) for a RC(time constant) of net is the longest time
# for its driving pin to change logic values.
# The technology library already contains its maximum transition time, so that if
# you do not set maximum transition time, Design Compiler would compute implicit transition time
# from the technology library.
# To change or add to the implicit transition time from the technology library,
# use the set_max_transition command.

# The set_max_transition command sets maximum transition time
# ascribe to the specified value on clocks, ports, or designs.
# When you use the set_max_transition command, Design_Compiler attempts to ensure that the
# transition time for each net is less than the specified value, and meet the restrictive value.
# If the multiple libraries are applied, Design compiler will use the smallest maximum
# transition time globally across the design.
# In addtion, When the maximum transition attribute is set on a design or port and a clock group,
# when multiple clocks are on the sampe paths,
# the most restrictive constraint is used.

# If the transition time for a given driver is greater than the max_transition value,
# Design Compiler reports a design rule violation and works to correct the violation.

# To undo a set_max_transition command, use the remove attribute command.
# remove_attribute [get_designs ] max_transition
# To get attribute of max transition, use the get attribute command.
# get_attribute find(pin, "libA/AND2/i") max_transition
# To set max_transition of all pins belonging to the clock Group
# set_max_transition 5 [get_clocks Clk]
#******************************************************************************
# set_max_fanout
# The fanout restriction is the constraint how many outputs can be driven,
# the values are described on integer form which the technology library contains.
# The technology library already includes its maximum fanout load, so that if
# you do not set maximum fanout load, Design Compiler would compute implicit fanout
# constraints for every driving pin in designs from the technology library.

# When you specify a max_fanout attribute, and the library max_fanout constraint exists,
# Design Compiler attempts to meet more restrictive value.
# When you use the set_max_fanout command, Design_Compiler attempts to ensure that the
# fanout for each pin is less than the specified value, and meet the restrictive value.

# If the calculated fanout is greater than the max_fanout value,
# Design Compiler reports a design rule violation and attempts to correct the violation.

# To undo a set_max_fanout command, use the remove attribute command.
# remove_attribute port_name fanout_load
# To get attribute of max transition, use the get attribute command.
# get_attribute "libA/AND2/i" fanout_load
# To set max_transition
# set_max_fanout 8 [get_designs design_name]
#******************************************************************************
# set_max_capacitance
# The set_max_capacitance command constrain capacitance independently.
# The set_max_capacitance command set a pin attribute that defines the maximum total
# capacitive load that an output pin can drive.
# Design Compiler computes the capacitance on a net by adding the wire capacitance of
# the pins attached to the net.
# Reference/Front_End/Design_Compiler/DC User Guide.pdf (p.220)
# The max_capacitance constraint operates akin to max_transition, but the cost
# is based on the total capacitance of the net, rather than the transition time.

# When you specify a max_capacitance attribute, and the library max_capacitance constraint exists,
# Design Compiler attempts to meet more restrictive value.
# When you use the max_capacitance command, Design_Compiler attempts to ensure that the
# max_capacitance for each pin is less than the specified value, and meet the restrictive value.

# If the calculated capacitance is greater than the max_capacitance value,
# Design Compiler reports a design rule violation and attempts to correct the violation.

# To annotate each driver pin with a frequency-based max_capacitance,
# set compile_enable_dyn_max_cap true
# To undo a set_max_transition command, use the remove attribute command.
# remove_attribute [get_designs ] max_capacitance
# To get attribute of max capacitance, use the get attribute command.
# get_attribute find(pin, "libA/AND2/i") max_capacitance
# To set max_capacitance
# set_max_capacitance 3 [get_designs adder]

# set_min_capacitance
# To set a minimum capacitance for nets attached to input or bidirectional ports,
# use the set_min_capacitance command.

# To set a minimum capacitance
# set_min_capacitance 12.0 port_name
# To undo a set_min_capacitance command, use the remove attribute command.
# remove_attribute port_name min_capacitance
#******************************************************************************
#******************************************************************************
#**                     Set Optimization Constraints                         **
#******************************************************************************
#******************************************************************************
# Design Compiler optimize speed first before optimizing area.
#******************************************************************************
Starting at the specified source object, the set_dont_touch_network command propagates the dont_touch_network attribute throughout the hierarchy of the clock network. By default, the propagation stops at output ports, or at sequential components if setup and hold relationships exist. If you use the -no_propagate option, the propagation stops at any logical cell.
The propagation of the dont_touch_network attribute occurs only in a forward direction, starting from the specified source object and spreading to objects driven by the source. The propagation can not go backward, even to electrically connected nets in the same net group. This method of propagation highlights an important difference between the set_dont_touch_network and the set_ideal_network commands: the set_ideal_network command propagates in both the forward and backward directions.


# refer to DC User guide p.545
